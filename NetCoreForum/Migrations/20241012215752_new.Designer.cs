// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreForum.Data;

#nullable disable

namespace NetCoreForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241012215752_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetCoreForum.Entites.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NetCoreForum.Entites.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NetCoreForum.Entites.EmailConfiguration", b =>
                {
                    b.Property<int>("EmailConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailConfigurationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("bit");

                    b.HasKey("EmailConfigurationID");

                    b.ToTable("EmailConfigurations");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("ActionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogCreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LogID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MessageIsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageReceiverID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageSenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageSentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationIsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NetCoreForum.Entites.PendingUser", b =>
                {
                    b.Property<int>("PendingUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PendingUserID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PendingUserID");

                    b.HasIndex("AppUserID");

                    b.ToTable("PendingUsers");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReplyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReplyLikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyViewCount")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("ReplyID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("TopicID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportAdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReportIsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("ReportReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ReportedEntityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("NetCoreForum.Entites.SiteSettings", b =>
                {
                    b.Property<int>("SiteSettingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteSettingsID"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaviconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxWarningCountForAppUser")
                        .HasColumnType("int");

                    b.Property<bool>("RequireAdminApproval")
                        .HasColumnType("bit");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SiteSettingsID");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            SiteSettingsID = 1,
                            ContactEmail = "mail@mail.com",
                            ContactPhone = "0555 555 55 55",
                            CreatedAt = new DateTime(2024, 10, 13, 0, 57, 51, 766, DateTimeKind.Local).AddTicks(365),
                            FaviconPath = "forum-favicon.png",
                            FooterText = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries",
                            LogoPath = "forum-logo.png",
                            MaxWarningCountForAppUser = 5,
                            RequireAdminApproval = false,
                            SiteName = "NetCoreForum",
                            UpdatedAt = new DateTime(2024, 10, 13, 0, 57, 51, 766, DateTimeKind.Local).AddTicks(377)
                        });
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("TopicContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicLikeCount")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TopicViewCount")
                        .HasColumnType("int");

                    b.HasKey("TopicID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("TopicTypeID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("NetCoreForum.Entites.TopicType", b =>
                {
                    b.Property<int>("TopicTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicTypeID"));

                    b.Property<string>("TopicTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicTypeID");

                    b.ToTable("TopicTypes");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Warning", b =>
                {
                    b.Property<int>("WarningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarningID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("WarningCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarningDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarningTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarningID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("NetCoreForum.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateID"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateID");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateID = 1,
                            Body = "Şifrenizi sıfırlamak için lütfen aşağıdaki bağlantıyı tıklayın: {reset_link}",
                            CreatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(235),
                            Subject = "Şifre Sıfırlama Talebi",
                            TemplateName = "Şifremi Unuttum",
                            UpdatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(235)
                        },
                        new
                        {
                            EmailTemplateID = 2,
                            Body = "Kayıt olduğunuz için teşekkürler! Hesabınıza hoş geldiniz.",
                            CreatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(237),
                            Subject = "Hoş geldiniz!",
                            TemplateName = "Hoş Geldiniz",
                            UpdatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(238)
                        },
                        new
                        {
                            EmailTemplateID = 3,
                            Body = "Şifreniz başarıyla değiştirildi. Herhangi bir sorunla karşılaşırsanız, lütfen bizimle iletişime geçin.",
                            CreatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(240),
                            Subject = "Şifre Değişikliğiniz Başarılı",
                            TemplateName = "Şifre Değişikliği",
                            UpdatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(240)
                        },
                        new
                        {
                            EmailTemplateID = 4,
                            Body = "Hesabınız başarıyla onaylandı. Artık sitemizi kullanabilirsiniz.",
                            CreatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(242),
                            Subject = "Hesabınız Onaylandı",
                            TemplateName = "Hesap Onayı",
                            UpdatedAt = new DateTime(2024, 10, 12, 21, 57, 51, 766, DateTimeKind.Utc).AddTicks(242)
                        });
                });

            modelBuilder.Entity("NetCoreForum.Entities.ErrorMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountLockedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionNotAllowedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DuplicateEntryMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAlreadyUsedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailNotFoundMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSendFailedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSizeExceededMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTypeNotAllowedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUploadFailedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvalidEmailOrPasswordMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvalidFormatMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvalidLoginMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvalidRequestMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotFoundMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPasswordIncorrectMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationFailedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeFailedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordTooWeakMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationFailedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredFieldMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnauthorizedAccessMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNotConfirmedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCoreForum.Entites.Log", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Notification", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.PendingUser", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Reply", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Replies")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NetCoreForum.Entites.Topic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Report", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Topics")
                        .HasForeignKey("AppUserID");

                    b.HasOne("NetCoreForum.Entites.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCoreForum.Entites.TopicType", "TopicType")
                        .WithMany("Topics")
                        .HasForeignKey("TopicTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");

                    b.Navigation("TopicType");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Warning", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Warnings")
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.AppUser", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Topics");

                    b.Navigation("Warnings");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("NetCoreForum.Entites.TopicType", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
