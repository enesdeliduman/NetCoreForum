// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreForum.Data;

#nullable disable

namespace NetCoreForum.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241018140944_wmejnrvhjs")]
    partial class wmejnrvhjs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetCoreForum.Entites.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NetCoreForum.Entites.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserBiography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NetCoreForum.Entites.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NetCoreForum.Entites.EmailConfiguration", b =>
                {
                    b.Property<int>("EmailConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailConfigurationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("bit");

                    b.HasKey("EmailConfigurationID");

                    b.ToTable("EmailConfigurations");

                    b.HasData(
                        new
                        {
                            EmailConfigurationID = 1,
                            CreatedAt = new DateTime(2024, 10, 18, 17, 9, 43, 144, DateTimeKind.Local).AddTicks(8787),
                            Port = 587,
                            SenderEmail = "iletisim@enesdeliduman.com",
                            SenderName = "İletişimm",
                            SenderPassword = "124124262114Ee",
                            SmtpServer = "mail.enesdeliduman.com",
                            UpdatedAt = new DateTime(2024, 10, 18, 17, 9, 43, 144, DateTimeKind.Local).AddTicks(8787),
                            UseSSL = true
                        });
                });

            modelBuilder.Entity("NetCoreForum.Entites.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("ActionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogCreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LogID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MessageIsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageReceiverID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageSenderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageSentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationIsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NetCoreForum.Entites.PendingUser", b =>
                {
                    b.Property<int>("PendingUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PendingUserID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PendingUserID");

                    b.HasIndex("AppUserID");

                    b.ToTable("PendingUsers");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReplyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReplyLikeCount")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("ReplyID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("TopicID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportAdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReportIsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("ReportReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ReportedEntityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("NetCoreForum.Entites.SiteSettings", b =>
                {
                    b.Property<int>("SiteSettingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteSettingsID"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaviconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxWarningCountForAppUser")
                        .HasColumnType("int");

                    b.Property<bool>("RequireAdminApproval")
                        .HasColumnType("bit");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SiteSettingsID");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            SiteSettingsID = 1,
                            ContactEmail = "mail@mail.com",
                            ContactPhone = "0555 555 55 55",
                            CreatedAt = new DateTime(2024, 10, 18, 17, 9, 43, 144, DateTimeKind.Local).AddTicks(8726),
                            FaviconPath = "forum-favicon.png",
                            FooterText = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            LogoPath = "forum-logo.png",
                            MaxWarningCountForAppUser = 5,
                            RequireAdminApproval = false,
                            SiteName = "NetCoreForum",
                            UpdatedAt = new DateTime(2024, 10, 18, 17, 9, 43, 144, DateTimeKind.Local).AddTicks(8740)
                        });
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicLikeCount")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TopicViewCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TopicID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("TopicTypeID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("NetCoreForum.Entites.TopicType", b =>
                {
                    b.Property<int>("TopicTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicTypeID"));

                    b.Property<string>("TopicTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicTypeID");

                    b.ToTable("TopicTypes");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Warning", b =>
                {
                    b.Property<int>("WarningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarningID"));

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("WarningCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarningDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarningTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarningID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("NetCoreForum.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateID"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViewedTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTemplateID");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateID = 1,
                            Body = "Şifrenizi sıfırlamak için lütfen aşağıdaki bağlantıyı tıklayın: {reset_link}",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8303),
                            Subject = "Şifre Sıfırlama Talebi",
                            TemplateName = "ForgotPassword",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8304),
                            ViewedTemplateName = "Şifremi Unuttum"
                        },
                        new
                        {
                            EmailTemplateID = 2,
                            Body = "Kayıt olduğunuz için teşekkürler! Hesabınıza hoş geldiniz.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8309),
                            Subject = "Hoş geldiniz!",
                            TemplateName = "Welcome",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8310),
                            ViewedTemplateName = "Hoş Geldiniz"
                        },
                        new
                        {
                            EmailTemplateID = 3,
                            Body = "Şifreniz başarıyla değiştirildi. Herhangi bir sorunla karşılaşırsanız, lütfen bizimle iletişime geçin.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8313),
                            Subject = "Şifre Değişikliğiniz Başarılı",
                            TemplateName = "ChangePassword",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8313),
                            ViewedTemplateName = "Şifre Değişikliği"
                        },
                        new
                        {
                            EmailTemplateID = 4,
                            Body = "Hesabınız başarıyla onaylandı. Artık sitemizi kullanabilirsiniz.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8316),
                            Subject = "Hesabınız Onaylandı",
                            TemplateName = "ConfirmAccount",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8317),
                            ViewedTemplateName = "Hesap Onayı"
                        },
                        new
                        {
                            EmailTemplateID = 5,
                            Body = "Foruma üye olduğunuz için teşekkürler! Hesabınız yönetici onayını bekliyor. Onaylandıktan sonra giriş yapabilirsiniz.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8320),
                            Subject = "Hesap Onayınızı Bekliyor",
                            TemplateName = "AccountPendingApproval",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8320),
                            ViewedTemplateName = "Hesap Beklemede"
                        },
                        new
                        {
                            EmailTemplateID = 6,
                            Body = "Tebrikler! Hesabınız başarıyla onaylandı ve artık foruma giriş yapabilirsiniz. Hoş geldiniz!",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8324),
                            Subject = "Hesabınız Onaylandı",
                            TemplateName = "AccountApproved",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8324),
                            ViewedTemplateName = "Hesap Onaylandı"
                        },
                        new
                        {
                            EmailTemplateID = 7,
                            Body = "Üzgünüz, hesabınız onaylanmadı. Daha fazla bilgi almak için lütfen yönetici ile iletişime geçin.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8327),
                            Subject = "Hesabınız Onaylanmadı",
                            TemplateName = "AccountNotApproved",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8328),
                            ViewedTemplateName = "Hesap Onaylanmadı"
                        },
                        new
                        {
                            EmailTemplateID = 8,
                            Body = "Hesabınız silindi. Eğer bu işlem siz tarafından yapılmadıysa lütfen bizimle iletişime geçin.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8331),
                            Subject = "Hesabınız Silindi",
                            TemplateName = "AccountDeleted",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8331),
                            ViewedTemplateName = "Hesap Silindi"
                        },
                        new
                        {
                            EmailTemplateID = 9,
                            Body = "Merhaba {username}, \n\nBu size gönderilen {warning_count}. uyarıdır. 5 uyarıya ulaştığınızda hesabınız otomatik olarak silinecektir. Lütfen site kurallarına uyun.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8334),
                            Subject = "Uyarı Aldınız - {warning_count}. Uyarı",
                            TemplateName = "WarningEmail",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8335),
                            ViewedTemplateName = "Uyarı Mesajı"
                        },
                        new
                        {
                            EmailTemplateID = 10,
                            Body = "Merhaba, \n\nMaksimum uyarı sayısına ulaştığınız için kalıcı olarak hesabınız askıya alınmıştır. Eğer bu işlem hakkında sorularınız varsa, lütfen bizimle iletişime geçin.",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8338),
                            Subject = "Hesabınız Silindi",
                            TemplateName = "AccountDeletedDueToWarnings",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8339),
                            ViewedTemplateName = "Hesap Silindi"
                        },
                        new
                        {
                            EmailTemplateID = 11,
                            Body = "Merhaba, Kayıt işleminizi tamamlamak için lütfen aşağıdaki bağlantıya tıklayarak e-posta adresinizi onaylayın:",
                            CreatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8341),
                            Subject = "E-posta Onayı Gerekli",
                            TemplateName = "EmailConfirmation",
                            UpdatedAt = new DateTime(2024, 10, 18, 14, 9, 43, 144, DateTimeKind.Utc).AddTicks(8342),
                            ViewedTemplateName = "E-posta Onayı"
                        });
                });

            modelBuilder.Entity("NetCoreForum.Entities.ErrorMessage", b =>
                {
                    b.Property<int>("ErrorMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorMessageID"));

                    b.Property<string>("ErrorMessageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorMessageID");

                    b.ToTable("ErrorMessages");

                    b.HasData(
                        new
                        {
                            ErrorMessageID = 1,
                            ErrorMessageDescription = "Aradığınız kayıt bulunamadı.",
                            ErrorMessageName = "NotFound"
                        },
                        new
                        {
                            ErrorMessageID = 2,
                            ErrorMessageDescription = "Bu işlemi gerçekleştirmek için yetkiniz yok.",
                            ErrorMessageName = "UnauthorizedAccess"
                        },
                        new
                        {
                            ErrorMessageID = 3,
                            ErrorMessageDescription = "Bir hata oluştu. Lütfen daha sonra tekrar deneyin.",
                            ErrorMessageName = "ServerError"
                        },
                        new
                        {
                            ErrorMessageID = 4,
                            ErrorMessageDescription = "Formda hatalar var. Lütfen kontrol edin.",
                            ErrorMessageName = "ValidationError"
                        },
                        new
                        {
                            ErrorMessageID = 5,
                            ErrorMessageDescription = "Giriş bilgileri hatalı. Lütfen tekrar deneyin.",
                            ErrorMessageName = "InvalidLogin"
                        },
                        new
                        {
                            ErrorMessageID = 6,
                            ErrorMessageDescription = "Hesabınız kilitlenmiştir. Lütfen destek ile iletişime geçin.",
                            ErrorMessageName = "AccountLocked"
                        },
                        new
                        {
                            ErrorMessageID = 7,
                            ErrorMessageDescription = "Parola en az 6 karakter olmalıdır ve en az bir büyük harf, bir küçük harf ve bir rakam içermelidir.",
                            ErrorMessageName = "PasswordTooWeak"
                        },
                        new
                        {
                            ErrorMessageID = 8,
                            ErrorMessageDescription = "Bu e-posta adresi zaten kullanılıyor.",
                            ErrorMessageName = "EmailAlreadyUsed"
                        },
                        new
                        {
                            ErrorMessageID = 9,
                            ErrorMessageDescription = "Lütfen e-posta adresinizi onaylayınız. Mail kutunuzu kontrol ediniz.",
                            ErrorMessageName = "UserNotConfirmed"
                        },
                        new
                        {
                            ErrorMessageID = 10,
                            ErrorMessageDescription = "E-posta adresi veya parola hatalı.",
                            ErrorMessageName = "InvalidEmailOrPassword"
                        },
                        new
                        {
                            ErrorMessageID = 11,
                            ErrorMessageDescription = "Hesabınız henüz onaylanmamıştır ve bekleme listesinde bulunmaktadır. Lütfen biraz daha bekleyin.",
                            ErrorMessageName = "AccountPendingApproval"
                        },
                        new
                        {
                            ErrorMessageID = 12,
                            ErrorMessageDescription = "Bu kayıt zaten mevcut.",
                            ErrorMessageName = "DuplicateEntry"
                        },
                        new
                        {
                            ErrorMessageID = 13,
                            ErrorMessageDescription = "Kayıt işlemi sırasında bir hata oluştu. Lütfen tekrar deneyin.",
                            ErrorMessageName = "RegistrationFailed"
                        },
                        new
                        {
                            ErrorMessageID = 14,
                            ErrorMessageDescription = "Şifre değişikliği sırasında bir hata oluştu.",
                            ErrorMessageName = "PasswordChangeFailed"
                        },
                        new
                        {
                            ErrorMessageID = 15,
                            ErrorMessageDescription = "Eski şifreniz hatalı.",
                            ErrorMessageName = "OldPasswordIncorrect"
                        },
                        new
                        {
                            ErrorMessageID = 16,
                            ErrorMessageDescription = "E-posta gönderme işlemi sırasında bir hata oluştu.",
                            ErrorMessageName = "EmailSendFailed"
                        },
                        new
                        {
                            ErrorMessageID = 17,
                            ErrorMessageDescription = "Bu e-posta adresine ait bir hesap bulunamadı.",
                            ErrorMessageName = "EmailNotFound"
                        },
                        new
                        {
                            ErrorMessageID = 18,
                            ErrorMessageDescription = "Bu alanın doldurulması zorunludur.",
                            ErrorMessageName = "RequiredField"
                        },
                        new
                        {
                            ErrorMessageID = 19,
                            ErrorMessageDescription = "Geçersiz format. Lütfen kontrol edin.",
                            ErrorMessageName = "InvalidFormat"
                        },
                        new
                        {
                            ErrorMessageID = 20,
                            ErrorMessageDescription = "İşlem gerçekleştirilemedi. Lütfen daha sonra tekrar deneyin.",
                            ErrorMessageName = "OperationFailed"
                        },
                        new
                        {
                            ErrorMessageID = 21,
                            ErrorMessageDescription = "Geçersiz istek. Lütfen kontrol edin.",
                            ErrorMessageName = "InvalidRequest"
                        },
                        new
                        {
                            ErrorMessageID = 22,
                            ErrorMessageDescription = "Bu eylem izin verilenler arasında değil.",
                            ErrorMessageName = "ActionNotAllowed"
                        },
                        new
                        {
                            ErrorMessageID = 23,
                            ErrorMessageDescription = "Dosya yükleme işlemi sırasında bir hata oluştu.",
                            ErrorMessageName = "FileUploadFailed"
                        },
                        new
                        {
                            ErrorMessageID = 24,
                            ErrorMessageDescription = "Bu dosya türü desteklenmiyor.",
                            ErrorMessageName = "FileTypeNotAllowed"
                        },
                        new
                        {
                            ErrorMessageID = 25,
                            ErrorMessageDescription = "Dosya boyutu limitini aşıyor.",
                            ErrorMessageName = "FileSizeExceeded"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCoreForum.Entites.Log", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Notification", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.PendingUser", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Reply", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Replies")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NetCoreForum.Entites.Topic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Report", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Topics")
                        .HasForeignKey("AppUserID");

                    b.HasOne("NetCoreForum.Entites.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCoreForum.Entites.TopicType", "TopicType")
                        .WithMany("Topics")
                        .HasForeignKey("TopicTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");

                    b.Navigation("TopicType");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Warning", b =>
                {
                    b.HasOne("NetCoreForum.Entites.AppUser", "AppUser")
                        .WithMany("Warnings")
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("NetCoreForum.Entites.AppUser", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Topics");

                    b.Navigation("Warnings");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("NetCoreForum.Entites.Topic", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("NetCoreForum.Entites.TopicType", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
